{"version":3,"sources":["ListContacts.js","App.js","registerServiceWorker.js","index.js"],"names":["ListContacts","state","query","updateQuery","_this","setState","trim","clearQuery","_this2","this","_this$props","props","contacts","onDeleteContact","showingContacts","filter","c","name","toLowerCase","includes","react_default","a","createElement","className","type","placeholder","value","onChange","event","target","length","onClick","map","contact","key","id","style","backgroundImage","concat","avatarURL","handle","Component","App","removeContact","currentState","src_ListContacts","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.62a727a7.chunk.js","sourcesContent":["import React,{ Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ListContacts extends Component {\r\n    static propTypes = {\r\n      contacts: PropTypes.array.isRequired,\r\n      onDeleteContact: PropTypes.func.isRequired,\r\n    }\r\n    state = {\r\n      query: ''\r\n    }\r\n    updateQuery = (query) => {\r\n      this.setState(() => ({\r\n        query: query.trim()\r\n      }))\r\n    }\r\n    clearQuery = () => {\r\n        this.updateQuery('')\r\n      }\r\n    \r\n    render() {\r\n    const { query } = this.state\r\n    const { contacts, onDeleteContact } = this.props\r\n\r\n    const showingContacts = query === ''\r\n        ? contacts\r\n        : contacts.filter((c) => (\r\n            c.name.toLowerCase().includes(query.toLowerCase())\r\n        ))\r\n\r\n      return (\r\n        <div className='list-contacts'>\r\n          <div className='list-contacts-top'>\r\n            <input\r\n              className='search-contacts'\r\n              type='text'\r\n              placeholder='Search Contacts'\r\n              value={query}\r\n              onChange={(event) => this.updateQuery(event.target.value)}\r\n            />\r\n          </div>\r\n          {showingContacts.length !== contacts.length && (\r\n          <div className='showing-contacts'>\r\n            <span>Now showing {showingContacts.length} of {contacts.length}</span>\r\n            <button onClick={this.clearQuery}>Show all</button>\r\n          </div>\r\n        )}\r\n\r\n          <ol className='contact-list'>\r\n            {showingContacts.map((contact) => (\r\n              <li key={contact.id} className='contact-list-item'>\r\n                <div\r\n                  className='contact-avatar'\r\n                  style={{\r\n                    backgroundImage: `url(${contact.avatarURL})`\r\n                  }}\r\n                ></div>\r\n                <div className='contact-details'>\r\n                  <p>{contact.name}</p>\r\n                  <p>{contact.handle}</p>\r\n                </div>\r\n                <button\r\n                \r\n                  onClick={() => onDeleteContact(contact)}\r\n                  className='contact-remove'>\r\n                    Remove\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ol>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\nexport default ListContacts","import React, { Component } from 'react';\nimport ListContacts from './ListContacts';\n\n\nclass App extends Component {\n    state = {\n      contacts: [\n        {\n          id: 'tyler',\n          name: 'Tyler McGinnis',\n          handle: 'tylermcginnis',\n          avatarURL: 'http://localhost:5001/tyler.jpg'\n        },\n        {\n          id: 'karen',\n          name: 'Karen Isgrigg',\n          handle: 'karen_isgrigg',\n          avatarURL: 'http://localhost:5001/karen.jpg'\n        },\n        {\n          id: 'richard',\n          name: 'Richard Kalehoff',\n          handle: 'richardkalehoff',\n          avatarURL: 'http://localhost:5001/richard.jpg'\n        },\n      ]\n    }\n  removeContact = (contact) => {\n    this.setState((currentState)=>({\n      contacts: currentState.contacts.filter((c)=>{\n              return c.id != contact.id\n      })\n    }))\n  }\n  render() {\n    return (\n      <div>\n        <ListContacts \n          contacts={this.state.contacts}\n          onDeleteContact = {this.removeContact} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}